local units   = import '../../utils/units.libsonnet';
local common  = import '../../common.libsonnet';

local seconds_per_minute  = 60;
local seconds_per_hours   = 3600;
local seconds_per_day     = 86400;

{
  to: {
    nanoseconds: {
      from_nanoseconds:   std.assertEqual(units.to.nanoseconds(1, common.units.Nanoseconds    ), 1),
      from_microseconds:  std.assertEqual(units.to.nanoseconds(1, common.units.Microseconds   ), 1000),
      from_Milliseconds:  std.assertEqual(units.to.nanoseconds(1, common.units.Milliseconds   ), 1000000),
      from_Seconds:       std.assertEqual(units.to.nanoseconds(1, common.units.Seconds        ), 1000000000),
      from_Minutes:       std.assertEqual(units.to.nanoseconds(1, common.units.Minutes        ), seconds_per_minute * 1000000000),
      from_Hours:         std.assertEqual(units.to.nanoseconds(1, common.units.Hours          ), seconds_per_hours  * 1000000000),
      from_Days:          std.assertEqual(units.to.nanoseconds(1, common.units.Days           ), seconds_per_day    * 1000000000),
    },
    microseconds: {
      from_nanoseconds:   std.assertEqual(units.to.microseconds(1, common.units.Nanoseconds   ), 1 / 1000),
      from_microseconds:  std.assertEqual(units.to.microseconds(1, common.units.Microseconds  ), 1),
      from_Milliseconds:  std.assertEqual(units.to.microseconds(1, common.units.Milliseconds  ), 1000),
      from_Seconds:       std.assertEqual(units.to.microseconds(1, common.units.Seconds       ), 1000000),
      from_Minutes:       std.assertEqual(units.to.microseconds(1, common.units.Minutes       ), seconds_per_minute * 1000000),
      from_Hours:         std.assertEqual(units.to.microseconds(1, common.units.Hours         ), seconds_per_hours  * 1000000),
      from_Days:          std.assertEqual(units.to.microseconds(1, common.units.Days          ), seconds_per_day    * 1000000),
    },
    milliseconds: {
      from_nanoseconds:   std.assertEqual(units.to.milliseconds(1, common.units.Nanoseconds   ), 1 / 1000000),
      from_microseconds:  std.assertEqual(units.to.milliseconds(1, common.units.Microseconds  ), 1 / 1000),
      from_Milliseconds:  std.assertEqual(units.to.milliseconds(1, common.units.Milliseconds  ), 1),
      from_Seconds:       std.assertEqual(units.to.milliseconds(1, common.units.Seconds       ), 1000),
      from_Minutes:       std.assertEqual(units.to.milliseconds(1, common.units.Minutes       ), seconds_per_minute * 1000),
      from_Hours:         std.assertEqual(units.to.milliseconds(1, common.units.Hours         ), seconds_per_hours  * 1000),
      from_Days:          std.assertEqual(units.to.milliseconds(1, common.units.Days          ), seconds_per_day    * 1000),
    },
    seconds: {
      from_nanoseconds:   std.assertEqual(units.to.seconds(1, common.units.Nanoseconds        ), 1 / 1000000000),
      from_microseconds:  std.assertEqual(units.to.seconds(1, common.units.Microseconds       ), 1 / 1000000),
      from_Milliseconds:  std.assertEqual(units.to.seconds(1, common.units.Milliseconds       ), 1 / 1000),
      from_Seconds:       std.assertEqual(units.to.seconds(1, common.units.Seconds            ), 1),
      from_Minutes:       std.assertEqual(units.to.seconds(1, common.units.Minutes            ), seconds_per_minute * 1),
      from_Hours:         std.assertEqual(units.to.seconds(1, common.units.Hours              ), seconds_per_hours  * 1),
      from_Days:          std.assertEqual(units.to.seconds(1, common.units.Days               ), seconds_per_day    * 1),
    },
    minutes: {
      from_nanoseconds:   std.assertEqual(units.to.minutes(1, common.units.Nanoseconds        ), 1 / (seconds_per_minute * 1000000000)),
      from_microseconds:  std.assertEqual(units.to.minutes(1, common.units.Microseconds       ), 1 / (seconds_per_minute * 1000000)),
      from_Milliseconds:  std.assertEqual(units.to.minutes(1, common.units.Milliseconds       ), 1 / (seconds_per_minute * 1000)),
      from_Seconds:       std.assertEqual(units.to.minutes(1, common.units.Seconds            ), 1 / seconds_per_minute),
      from_Minutes:       std.assertEqual(units.to.minutes(1, common.units.Minutes            ), 1),
      from_Hours:         std.assertEqual(units.to.minutes(1, common.units.Hours              ), 60),
      from_Days:          std.assertEqual(units.to.minutes(1, common.units.Days               ), 60 * 24),
    },
    hours: {
      from_nanoseconds:   std.assertEqual(units.to.hours(1, common.units.Nanoseconds          ), 1 / (seconds_per_hours * 1000000000)),
      from_microseconds:  std.assertEqual(units.to.hours(1, common.units.Microseconds         ), 1 / (seconds_per_hours * 1000000)),
      from_Milliseconds:  std.assertEqual(units.to.hours(1, common.units.Milliseconds         ), 1 / (seconds_per_hours * 1000)),
      from_Seconds:       std.assertEqual(units.to.hours(1, common.units.Seconds              ), 1 / seconds_per_hours),
      from_Minutes:       std.assertEqual(units.to.hours(1, common.units.Minutes              ), 1 / 60),
      from_Hours:         std.assertEqual(units.to.hours(1, common.units.Hours                ), 1),
      from_Days:          std.assertEqual(units.to.hours(1, common.units.Days                 ), 24),
    },
    days: {
      from_nanoseconds:   std.assertEqual(units.to.days(1, common.units.Nanoseconds           ), 1 / (seconds_per_day * 1000000000)),
      from_microseconds:  std.assertEqual(units.to.days(1, common.units.Microseconds          ), 1 / (seconds_per_day * 1000000)),
      from_Milliseconds:  std.assertEqual(units.to.days(1, common.units.Milliseconds          ), 1 / (seconds_per_day * 1000)),
      from_Seconds:       std.assertEqual(units.to.days(1, common.units.Seconds               ), 1 / seconds_per_day),
      from_Minutes:       std.assertEqual(units.to.days(1, common.units.Minutes               ), 1 / (24 * 60)),
      from_Hours:         std.assertEqual(units.to.days(1, common.units.Hours                 ), 1 / 24),
      from_Days:          std.assertEqual(units.to.days(1, common.units.Days                  ), 1),
    },

    bytes: {
      from_bytes:         std.assertEqual(units.to.bytes(1, common.units.Bytes                ), 1),
      from_kibibytes:     std.assertEqual(units.to.bytes(1, common.units.Kibibytes            ), 1024),
      from_mebibytes:     std.assertEqual(units.to.bytes(1, common.units.Mebibytes            ), 1048576),
      from_gigibytes:     std.assertEqual(units.to.bytes(1, common.units.Gibibytes            ), 1073741824),
      from_tebibytes:     std.assertEqual(units.to.bytes(1, common.units.Tebibytes            ), 1099511627776),
      from_pebibytes:     std.assertEqual(units.to.bytes(1, common.units.Pebibytes            ), 1125899906842624),
      from_bytesdec:      std.assertEqual(units.to.bytes(1, common.units.BytesDec             ), 1),
      from_kilobytes:     std.assertEqual(units.to.bytes(1, common.units.Kilobytes            ), 1000),
      from_megabytes:     std.assertEqual(units.to.bytes(1, common.units.Megabytes            ), 1000000),
      from_gigabytes:     std.assertEqual(units.to.bytes(1, common.units.Gigabytes            ), 1000000000),
      from_terabytes:     std.assertEqual(units.to.bytes(1, common.units.Terabytes            ), 1000000000000),
      from_petabytes:     std.assertEqual(units.to.bytes(1, common.units.Petabytes            ), 1000000000000000),
    },
    kibibytes: {
      from_bytes:         std.assertEqual(units.to.kibibytes(1, common.units.Bytes            ), 0.0009765625),
      from_kibibytes:     std.assertEqual(units.to.kibibytes(1, common.units.Kibibytes        ), 1),
      from_mebibytes:     std.assertEqual(units.to.kibibytes(1, common.units.Mebibytes        ), 1024),
      from_gigibytes:     std.assertEqual(units.to.kibibytes(1, common.units.Gibibytes        ), 1048576),
      from_tebibytes:     std.assertEqual(units.to.kibibytes(1, common.units.Tebibytes        ), 1073741824),
      from_pebibytes:     std.assertEqual(units.to.kibibytes(1, common.units.Pebibytes        ), 1099511627776),
      from_bytesdec:      std.assertEqual(units.to.kibibytes(1, common.units.BytesDec         ), 0.0009765625),
      from_kilobytes:     std.assertEqual(units.to.kibibytes(1, common.units.Kilobytes        ), 0.9765625),
      from_megabytes:     std.assertEqual(units.to.kibibytes(1, common.units.Megabytes        ), 976.5625),
      from_gigabytes:     std.assertEqual(units.to.kibibytes(1, common.units.Gigabytes        ), 976562.5),
      from_terabytes:     std.assertEqual(units.to.kibibytes(1, common.units.Terabytes        ), 976562500),
      from_petabytes:     std.assertEqual(units.to.kibibytes(1, common.units.Petabytes        ), 976562500000),
    },
    mebibytes: {
      from_bytes:         std.assertEqual(units.to.mebibytes(1, common.units.Bytes            ), 0.00000095367431640625),
      from_kibibytes:     std.assertEqual(units.to.mebibytes(1, common.units.Kibibytes        ), 0.0009765625),
      from_mebibytes:     std.assertEqual(units.to.mebibytes(1, common.units.Mebibytes        ), 1),
      from_gigibytes:     std.assertEqual(units.to.mebibytes(1, common.units.Gibibytes        ), 1024),
      from_tebibytes:     std.assertEqual(units.to.mebibytes(1, common.units.Tebibytes        ), 1048576),
      from_pebibytes:     std.assertEqual(units.to.mebibytes(1, common.units.Pebibytes        ), 1073741824),
      from_bytesdec:      std.assertEqual(units.to.mebibytes(1, common.units.BytesDec         ), 0.00000095367431640625),
      from_kilobytes:     std.assertEqual(units.to.mebibytes(1, common.units.Kilobytes        ), 0.00095367431640625),
      from_megabytes:     std.assertEqual(units.to.mebibytes(1, common.units.Megabytes        ), 0.95367431640625),
      from_gigabytes:     std.assertEqual(units.to.mebibytes(1, common.units.Gigabytes        ), 953.67431640625),
      from_terabytes:     std.assertEqual(units.to.mebibytes(1, common.units.Terabytes        ), 953674.31640625),
      from_petabytes:     std.assertEqual(units.to.mebibytes(1, common.units.Petabytes        ), 953674316.40625),
    },
    gibibytes: {
      from_bytes:         std.assertEqual(units.to.gibibytes(1, common.units.Bytes            ), 0.000000000931322574615478515625),
      from_kibibytes:     std.assertEqual(units.to.gibibytes(1, common.units.Kibibytes        ), 0.00000095367431640625),
      from_mebibytes:     std.assertEqual(units.to.gibibytes(1, common.units.Mebibytes        ), 0.0009765625),
      from_gigibytes:     std.assertEqual(units.to.gibibytes(1, common.units.Gibibytes        ), 1),
      from_tebibytes:     std.assertEqual(units.to.gibibytes(1, common.units.Tebibytes        ), 1024),
      from_pebibytes:     std.assertEqual(units.to.gibibytes(1, common.units.Pebibytes        ), 1048576),
      from_bytesdec:      std.assertEqual(units.to.gibibytes(1, common.units.BytesDec         ), 0.000000000931322574615478515625),
      from_kilobytes:     std.assertEqual(units.to.gibibytes(1, common.units.Kilobytes        ), 0.000000931322574615478515625),
      from_megabytes:     std.assertEqual(units.to.gibibytes(1, common.units.Megabytes        ), 0.000931322574615478515625),
      from_gigabytes:     std.assertEqual(units.to.gibibytes(1, common.units.Gigabytes        ), 0.931322574615478515625),
      from_terabytes:     std.assertEqual(units.to.gibibytes(1, common.units.Terabytes        ), 931.322574615478515625),
      from_petabytes:     std.assertEqual(units.to.gibibytes(1, common.units.Petabytes        ), 931322.574615478515625),
    },
    tebibytes: {
      from_bytes:         std.assertEqual(units.to.tebibytes(1, common.units.Bytes            ), 0.0000000000009094947017729282379150390625),
      from_kibibytes:     std.assertEqual(units.to.tebibytes(1, common.units.Kibibytes        ), 0.000000000931322574615478515625),
      from_mebibytes:     std.assertEqual(units.to.tebibytes(1, common.units.Mebibytes        ), 0.00000095367431640625),
      from_gigibytes:     std.assertEqual(units.to.tebibytes(1, common.units.Gibibytes        ), 0.0009765625),
      from_tebibytes:     std.assertEqual(units.to.tebibytes(1, common.units.Tebibytes        ), 1),
      from_pebibytes:     std.assertEqual(units.to.tebibytes(1, common.units.Pebibytes        ), 1024),
      from_bytesdec:      std.assertEqual(units.to.tebibytes(1, common.units.BytesDec         ), 0.0000000000009094947017729282379150390625),
      from_kilobytes:     std.assertEqual(units.to.tebibytes(1, common.units.Kilobytes        ), 0.0000000009094947017729282379150390625),
      from_megabytes:     std.assertEqual(units.to.tebibytes(1, common.units.Megabytes        ), 0.0000009094947017729282379150390625),
      from_gigabytes:     std.assertEqual(units.to.tebibytes(1, common.units.Gigabytes        ), 0.0009094947017729282379150390625),
      from_terabytes:     std.assertEqual(units.to.tebibytes(1, common.units.Terabytes        ), 0.9094947017729282379150390625),
      from_petabytes:     std.assertEqual(units.to.tebibytes(1, common.units.Petabytes        ), 909.4947017729282379150390625),
    },
    pebibytes: {
      from_bytes:         std.assertEqual(units.to.pebibytes(1, common.units.Bytes            ), 0.0000000000000008881784197001252323389053),
      from_kibibytes:     std.assertEqual(units.to.pebibytes(1, common.units.Kibibytes        ), 0.0000000000009094947017729282379150390625),
      from_mebibytes:     std.assertEqual(units.to.pebibytes(1, common.units.Mebibytes        ), 0.000000000931322574615478515625),
      from_gigibytes:     std.assertEqual(units.to.pebibytes(1, common.units.Gibibytes        ), 0.00000095367431640625),
      from_tebibytes:     std.assertEqual(units.to.pebibytes(1, common.units.Tebibytes        ), 0.0009765625),
      from_pebibytes:     std.assertEqual(units.to.pebibytes(1, common.units.Pebibytes        ), 1),
      from_bytesdec:      std.assertEqual(units.to.pebibytes(1, common.units.BytesDec         ), 0.0000000000000008881784197001252323389053),
      from_kilobytes:     std.assertEqual(units.to.pebibytes(1, common.units.Kilobytes        ), 0.0000000000008881784197001252323389053344),
      from_megabytes:     std.assertEqual(units.to.pebibytes(1, common.units.Megabytes        ), 0.0000000008881784197001252323389053344726),
      from_gigabytes:     std.assertEqual(units.to.pebibytes(1, common.units.Gigabytes        ), 0.0000008881784197001252323389053344726562),
      from_terabytes:     std.assertEqual(units.to.pebibytes(1, common.units.Terabytes        ), 0.00088817841970012523233890533447265625),
      from_petabytes:     std.assertEqual(units.to.pebibytes(1, common.units.Petabytes        ), 0.88817841970012523233890533447265625),
    },

    kilobytes: {
      from_bytes:         std.assertEqual(units.to.kilobytes(1, common.units.Bytes            ), 0.001),
      from_kibibytes:     std.assertEqual(units.to.kilobytes(1, common.units.Kibibytes        ), 1.024),
      from_mebibytes:     std.assertEqual(units.to.kilobytes(1, common.units.Mebibytes        ), 1048.576),
      from_gigibytes:     std.assertEqual(units.to.kilobytes(1, common.units.Gibibytes        ), 1073741.824),
      from_tebibytes:     std.assertEqual(units.to.kilobytes(1, common.units.Tebibytes        ), 1099511627.776),
      from_pebibytes:     std.assertEqual(units.to.kilobytes(1, common.units.Pebibytes        ), 1125899906842.624),
      from_bytesdec:      std.assertEqual(units.to.kilobytes(1, common.units.BytesDec         ), 0.001),
      from_kilobytes:     std.assertEqual(units.to.kilobytes(1, common.units.Kilobytes        ), 1),
      from_megabytes:     std.assertEqual(units.to.kilobytes(1, common.units.Megabytes        ), 1000),
      from_gigabytes:     std.assertEqual(units.to.kilobytes(1, common.units.Gigabytes        ), 1000000),
      from_terabytes:     std.assertEqual(units.to.kilobytes(1, common.units.Terabytes        ), 1000000000),
      from_petabytes:     std.assertEqual(units.to.kilobytes(1, common.units.Petabytes        ), 1000000000000),
    },
    megabytes: {
      from_bytes:         std.assertEqual(units.to.megabytes(1, common.units.Bytes            ), 0.000001),
      from_kibibytes:     std.assertEqual(units.to.megabytes(1, common.units.Kibibytes        ), 0.001024),
      from_mebibytes:     std.assertEqual(units.to.megabytes(1, common.units.Mebibytes        ), 1.048576),
      from_gigibytes:     std.assertEqual(units.to.megabytes(1, common.units.Gibibytes        ), 1073.741824),
      from_tebibytes:     std.assertEqual(units.to.megabytes(1, common.units.Tebibytes        ), 1099511.627776),
      from_pebibytes:     std.assertEqual(units.to.megabytes(1, common.units.Pebibytes        ), 1125899906.842624),
      from_bytesdec:      std.assertEqual(units.to.megabytes(1, common.units.BytesDec         ), 0.000001),
      from_kilobytes:     std.assertEqual(units.to.megabytes(1, common.units.Kilobytes        ), 0.001),
      from_megabytes:     std.assertEqual(units.to.megabytes(1, common.units.Megabytes        ), 1),
      from_gigabytes:     std.assertEqual(units.to.megabytes(1, common.units.Gigabytes        ), 1000),
      from_terabytes:     std.assertEqual(units.to.megabytes(1, common.units.Terabytes        ), 1000000),
      from_petabytes:     std.assertEqual(units.to.megabytes(1, common.units.Petabytes        ), 1000000000),
    },
    gigabytes: {
      from_bytes:         std.assertEqual(units.to.gigabytes(1, common.units.Bytes            ), 0.000000001),
      from_kibibytes:     std.assertEqual(units.to.gigabytes(1, common.units.Kibibytes        ), 0.000001024),
      from_mebibytes:     std.assertEqual(units.to.gigabytes(1, common.units.Mebibytes        ), 0.001048576),
      from_gigibytes:     std.assertEqual(units.to.gigabytes(1, common.units.Gibibytes        ), 1.073741824),
      from_tebibytes:     std.assertEqual(units.to.gigabytes(1, common.units.Tebibytes        ), 1099.511627776),
      from_pebibytes:     std.assertEqual(units.to.gigabytes(1, common.units.Pebibytes        ), 1125899.906842624),
      from_bytesdec:      std.assertEqual(units.to.gigabytes(1, common.units.BytesDec         ), 0.000000001),
      from_kilobytes:     std.assertEqual(units.to.gigabytes(1, common.units.Kilobytes        ), 0.000001),
      from_megabytes:     std.assertEqual(units.to.gigabytes(1, common.units.Megabytes        ), 0.001),
      from_gigabytes:     std.assertEqual(units.to.gigabytes(1, common.units.Gigabytes        ), 1),
      from_terabytes:     std.assertEqual(units.to.gigabytes(1, common.units.Terabytes        ), 1000),
      from_petabytes:     std.assertEqual(units.to.gigabytes(1, common.units.Petabytes        ), 1000000),
    },
    terabytes: {
      from_bytes:         std.assertEqual(units.to.terabytes(1, common.units.Bytes            ), 0.000000000001),
      from_kibibytes:     std.assertEqual(units.to.terabytes(1, common.units.Kibibytes        ), 0.000000001024),
      from_mebibytes:     std.assertEqual(units.to.terabytes(1, common.units.Mebibytes        ), 0.000001048576),
      from_gigibytes:     std.assertEqual(units.to.terabytes(1, common.units.Gibibytes        ), 0.001073741824),
      from_tebibytes:     std.assertEqual(units.to.terabytes(1, common.units.Tebibytes        ), 1.099511627776),
      from_pebibytes:     std.assertEqual(units.to.terabytes(1, common.units.Pebibytes        ), 1125.899906842624),
      from_bytesdec:      std.assertEqual(units.to.terabytes(1, common.units.BytesDec         ), 0.000000000001),
      from_kilobytes:     std.assertEqual(units.to.terabytes(1, common.units.Kilobytes        ), 0.000000001),
      from_megabytes:     std.assertEqual(units.to.terabytes(1, common.units.Megabytes        ), 0.000001),
      from_gigabytes:     std.assertEqual(units.to.terabytes(1, common.units.Gigabytes        ), 0.001),
      from_terabytes:     std.assertEqual(units.to.terabytes(1, common.units.Terabytes        ), 1),
      from_petabytes:     std.assertEqual(units.to.terabytes(1, common.units.Petabytes        ), 1000),
    },
    petabytes: {
      from_bytes:         std.assertEqual(units.to.petabytes(1, common.units.Bytes            ), 0.000000000000001),
      from_kibibytes:     std.assertEqual(units.to.petabytes(1, common.units.Kibibytes        ), 0.000000000001024),
      from_mebibytes:     std.assertEqual(units.to.petabytes(1, common.units.Mebibytes        ), 0.000000001048576),
      from_gigibytes:     std.assertEqual(units.to.petabytes(1, common.units.Gibibytes        ), 0.000001073741824),
      from_tebibytes:     std.assertEqual(units.to.petabytes(1, common.units.Tebibytes        ), 0.001099511627776),
      from_pebibytes:     std.assertEqual(units.to.petabytes(1, common.units.Pebibytes        ), 1.125899906842624),
      from_bytesdec:      std.assertEqual(units.to.petabytes(1, common.units.BytesDec         ), 0.000000000000001),
      from_kilobytes:     std.assertEqual(units.to.petabytes(1, common.units.Kilobytes        ), 0.000000000001),
      from_megabytes:     std.assertEqual(units.to.petabytes(1, common.units.Megabytes        ), 0.000000001),
      from_gigabytes:     std.assertEqual(units.to.petabytes(1, common.units.Gigabytes        ), 0.000001),
      from_terabytes:     std.assertEqual(units.to.petabytes(1, common.units.Terabytes        ), 0.001),
      from_petabytes:     std.assertEqual(units.to.petabytes(1, common.units.Petabytes        ), 1),
    },
  },

  from: {
    nanoseconds: {
      to_nanoseconds:   std.assertEqual(units.from.nanoseconds(1, common.units.Nanoseconds    ), 1),
      to_microseconds:  std.assertEqual(units.from.nanoseconds(1, common.units.Microseconds   ), 0.001),
      to_Milliseconds:  std.assertEqual(units.from.nanoseconds(1, common.units.Milliseconds   ), 0.000001),
      to_Seconds:       std.assertEqual(units.from.nanoseconds(1, common.units.Seconds        ), 0.000000001),
      to_Minutes:       std.assertEqual(units.from.nanoseconds(1, common.units.Minutes        ), 1 / (seconds_per_minute * 1000000000)),
      to_Hours:         std.assertEqual(units.from.nanoseconds(1, common.units.Hours          ), 1 / (seconds_per_hours  * 1000000000)),
      to_Days:          std.assertEqual(units.from.nanoseconds(1, common.units.Days           ), 1 / (seconds_per_day    * 1000000000)),
    },
    microseconds: {
      to_nanoseconds:   std.assertEqual(units.from.microseconds(1, common.units.Nanoseconds   ), 1000),
      to_microseconds:  std.assertEqual(units.from.microseconds(1, common.units.Microseconds  ), 1),
      to_Milliseconds:  std.assertEqual(units.from.microseconds(1, common.units.Milliseconds  ), 0.001),
      to_Seconds:       std.assertEqual(units.from.microseconds(1, common.units.Seconds       ), 0.000001),
      to_Minutes:       std.assertEqual(units.from.microseconds(1, common.units.Minutes       ), 1 / (seconds_per_minute * 1000000)),
      to_Hours:         std.assertEqual(units.from.microseconds(1, common.units.Hours         ), 1 / (seconds_per_hours  * 1000000)),
      to_Days:          std.assertEqual(units.from.microseconds(1, common.units.Days          ), 1 / (seconds_per_day    * 1000000)),
    },
    milliseconds: {
      to_nanoseconds:   std.assertEqual(units.from.milliseconds(1, common.units.Nanoseconds   ), 1000000),
      to_microseconds:  std.assertEqual(units.from.milliseconds(1, common.units.Microseconds  ), 1000),
      to_Milliseconds:  std.assertEqual(units.from.milliseconds(1, common.units.Milliseconds  ), 1),
      to_Seconds:       std.assertEqual(units.from.milliseconds(1, common.units.Seconds       ), 0.001),
      to_Minutes:       std.assertEqual(units.from.milliseconds(1, common.units.Minutes       ), 1 / (seconds_per_minute * 1000)),
      to_Hours:         std.assertEqual(units.from.milliseconds(1, common.units.Hours         ), 1 / (seconds_per_hours  * 1000)),
      to_Days:          std.assertEqual(units.from.milliseconds(1, common.units.Days          ), 1 / (seconds_per_day    * 1000)),
    },
    seconds: {
      to_nanoseconds:   std.assertEqual(units.from.seconds(1, common.units.Nanoseconds        ), 1000000000),
      to_microseconds:  std.assertEqual(units.from.seconds(1, common.units.Microseconds       ), 1000000),
      to_Milliseconds:  std.assertEqual(units.from.seconds(1, common.units.Milliseconds       ), 1000),
      to_Seconds:       std.assertEqual(units.from.seconds(1, common.units.Seconds            ), 1),
      to_Minutes:       std.assertEqual(units.from.seconds(1, common.units.Minutes            ), 1 / seconds_per_minute),
      to_Hours:         std.assertEqual(units.from.seconds(1, common.units.Hours              ), 1 / seconds_per_hours),
      to_Days:          std.assertEqual(units.from.seconds(1, common.units.Days               ), 1 / seconds_per_day),
    },
    minutes: {
      to_nanoseconds:   std.assertEqual(units.from.minutes(1, common.units.Nanoseconds        ), seconds_per_minute * 1000000000),
      to_microseconds:  std.assertEqual(units.from.minutes(1, common.units.Microseconds       ), seconds_per_minute * 1000000),
      to_Milliseconds:  std.assertEqual(units.from.minutes(1, common.units.Milliseconds       ), seconds_per_minute * 1000),
      to_Seconds:       std.assertEqual(units.from.minutes(1, common.units.Seconds            ), seconds_per_minute),
      to_Minutes:       std.assertEqual(units.from.minutes(1, common.units.Minutes            ), 1),
      to_Hours:         std.assertEqual(units.from.minutes(1, common.units.Hours              ), 1 / 60),
      to_Days:          std.assertEqual(units.from.minutes(1, common.units.Days               ), 1 / (60 * 24)),
    },
    hours: {
      to_nanoseconds:   std.assertEqual(units.from.hours(1, common.units.Nanoseconds          ), seconds_per_hours * 1000000000),
      to_microseconds:  std.assertEqual(units.from.hours(1, common.units.Microseconds         ), seconds_per_hours * 1000000),
      to_Milliseconds:  std.assertEqual(units.from.hours(1, common.units.Milliseconds         ), seconds_per_hours * 1000),
      to_Seconds:       std.assertEqual(units.from.hours(1, common.units.Seconds              ), seconds_per_hours),
      to_Minutes:       std.assertEqual(units.from.hours(1, common.units.Minutes              ), 60),
      to_Hours:         std.assertEqual(units.from.hours(1, common.units.Hours                ), 1),
      to_Days:          std.assertEqual(units.from.hours(1, common.units.Days                 ), 1 / 24),
    },
    days: {
      to_nanoseconds:   std.assertEqual(units.from.days(1, common.units.Nanoseconds           ), seconds_per_day * 1000000000),
      to_microseconds:  std.assertEqual(units.from.days(1, common.units.Microseconds          ), seconds_per_day * 1000000),
      to_Milliseconds:  std.assertEqual(units.from.days(1, common.units.Milliseconds          ), seconds_per_day * 1000),
      to_Seconds:       std.assertEqual(units.from.days(1, common.units.Seconds               ), seconds_per_day),
      to_Minutes:       std.assertEqual(units.from.days(1, common.units.Minutes               ), 24 * 60),
      to_Hours:         std.assertEqual(units.from.days(1, common.units.Hours                 ), 24),
      to_Days:          std.assertEqual(units.from.days(1, common.units.Days                  ), 1),
    },

    bytes: {
      to_bytes:         std.assertEqual(units.from.bytes(1, common.units.Bytes                ), 1),
      to_kibibytes:     std.assertEqual(units.from.bytes(1, common.units.Kibibytes            ), 0.0009765625),
      to_mebibytes:     std.assertEqual(units.from.bytes(1, common.units.Mebibytes            ), 0.00000095367431640625),
      to_gigibytes:     std.assertEqual(units.from.bytes(1, common.units.Gibibytes            ), 0.000000000931322574615478515625),
      to_tebibytes:     std.assertEqual(units.from.bytes(1, common.units.Tebibytes            ), 0.0000000000009094947017729282379150390625),
      to_pebibytes:     std.assertEqual(units.from.bytes(1, common.units.Pebibytes            ), 0.0000000000000008881784197001252323389053),
      to_bytesdec:      std.assertEqual(units.from.bytes(1, common.units.BytesDec             ), 1),
      to_kilobytes:     std.assertEqual(units.from.bytes(1, common.units.Kilobytes            ), 0.001),
      to_megabytes:     std.assertEqual(units.from.bytes(1, common.units.Megabytes            ), 0.000001),
      to_gigabytes:     std.assertEqual(units.from.bytes(1, common.units.Gigabytes            ), 0.000000001),
      to_terabytes:     std.assertEqual(units.from.bytes(1, common.units.Terabytes            ), 0.000000000001),
      to_petabytes:     std.assertEqual(units.from.bytes(1, common.units.Petabytes            ), 0.000000000000001),
    },
    kibibytes: {
      to_bytes:         std.assertEqual(units.from.kibibytes(1, common.units.Bytes            ), 1024),
      to_kibibytes:     std.assertEqual(units.from.kibibytes(1, common.units.Kibibytes        ), 1),
      to_mebibytes:     std.assertEqual(units.from.kibibytes(1, common.units.Mebibytes        ), 0.0009765625),
      to_gigibytes:     std.assertEqual(units.from.kibibytes(1, common.units.Gibibytes        ), 0.00000095367431640625),
      to_tebibytes:     std.assertEqual(units.from.kibibytes(1, common.units.Tebibytes        ), 0.000000000931322574615478515625),
      to_pebibytes:     std.assertEqual(units.from.kibibytes(1, common.units.Pebibytes        ), 0.0000000000009094947017729282379150390625),
      to_bytesdec:      std.assertEqual(units.from.kibibytes(1, common.units.BytesDec         ), 1024),
      to_kilobytes:     std.assertEqual(units.from.kibibytes(1, common.units.Kilobytes        ), 1.024),
      to_megabytes:     std.assertEqual(units.from.kibibytes(1, common.units.Megabytes        ), 0.001024),
      to_gigabytes:     std.assertEqual(units.from.kibibytes(1, common.units.Gigabytes        ), 0.000001024),
      to_terabytes:     std.assertEqual(units.from.kibibytes(1, common.units.Terabytes        ), 0.000000001024),
      to_petabytes:     std.assertEqual(units.from.kibibytes(1, common.units.Petabytes        ), 0.000000000001024),
    },
    mebibytes: {
      to_bytes:         std.assertEqual(units.from.mebibytes(1, common.units.Bytes            ), 1048576),
      to_kibibytes:     std.assertEqual(units.from.mebibytes(1, common.units.Kibibytes        ), 1024),
      to_mebibytes:     std.assertEqual(units.from.mebibytes(1, common.units.Mebibytes        ), 1),
      to_gigibytes:     std.assertEqual(units.from.mebibytes(1, common.units.Gibibytes        ), 0.0009765625),
      to_tebibytes:     std.assertEqual(units.from.mebibytes(1, common.units.Tebibytes        ), 0.00000095367431640625),
      to_pebibytes:     std.assertEqual(units.from.mebibytes(1, common.units.Pebibytes        ), 0.000000000931322574615478515625),
      to_bytesdec:      std.assertEqual(units.from.mebibytes(1, common.units.BytesDec         ), 1048576),
      to_kilobytes:     std.assertEqual(units.from.mebibytes(1, common.units.Kilobytes        ), 1048.576),
      to_megabytes:     std.assertEqual(units.from.mebibytes(1, common.units.Megabytes        ), 1.048576),
      to_gigabytes:     std.assertEqual(units.from.mebibytes(1, common.units.Gigabytes        ), 0.001048576),
      to_terabytes:     std.assertEqual(units.from.mebibytes(1, common.units.Terabytes        ), 0.000001048576),
      to_petabytes:     std.assertEqual(units.from.mebibytes(1, common.units.Petabytes        ), 0.000000001048576),
    },
    gibibytes: {
      to_bytes:         std.assertEqual(units.from.gibibytes(1, common.units.Bytes            ), 1073741824),
      to_kibibytes:     std.assertEqual(units.from.gibibytes(1, common.units.Kibibytes        ), 1048576),
      to_mebibytes:     std.assertEqual(units.from.gibibytes(1, common.units.Mebibytes        ), 1024),
      to_gigibytes:     std.assertEqual(units.from.gibibytes(1, common.units.Gibibytes        ), 1),
      to_tebibytes:     std.assertEqual(units.from.gibibytes(1, common.units.Tebibytes        ), 0.0009765625),
      to_pebibytes:     std.assertEqual(units.from.gibibytes(1, common.units.Pebibytes        ), 0.00000095367431640625),
      to_bytesdec:      std.assertEqual(units.from.gibibytes(1, common.units.BytesDec         ), 1073741824),
      to_kilobytes:     std.assertEqual(units.from.gibibytes(1, common.units.Kilobytes        ), 1073741.824),
      to_megabytes:     std.assertEqual(units.from.gibibytes(1, common.units.Megabytes        ), 1073.741824),
      to_gigabytes:     std.assertEqual(units.from.gibibytes(1, common.units.Gigabytes        ), 1.073741824),
      to_terabytes:     std.assertEqual(units.from.gibibytes(1, common.units.Terabytes        ), 0.001073741824),
      to_petabytes:     std.assertEqual(units.from.gibibytes(1, common.units.Petabytes        ), 0.000001073741824),
    },
    tebibytes: {
      to_bytes:         std.assertEqual(units.from.tebibytes(1, common.units.Bytes            ), 1099511627776),
      to_kibibytes:     std.assertEqual(units.from.tebibytes(1, common.units.Kibibytes        ), 1073741824),
      to_mebibytes:     std.assertEqual(units.from.tebibytes(1, common.units.Mebibytes        ), 1048576),
      to_gigibytes:     std.assertEqual(units.from.tebibytes(1, common.units.Gibibytes        ), 1024),
      to_tebibytes:     std.assertEqual(units.from.tebibytes(1, common.units.Tebibytes        ), 1),
      to_pebibytes:     std.assertEqual(units.from.tebibytes(1, common.units.Pebibytes        ), 0.0009765625),
      to_bytesdec:      std.assertEqual(units.from.tebibytes(1, common.units.BytesDec         ), 1099511627776),
      to_kilobytes:     std.assertEqual(units.from.tebibytes(1, common.units.Kilobytes        ), 1099511627.776),
      to_megabytes:     std.assertEqual(units.from.tebibytes(1, common.units.Megabytes        ), 1099511.627776),
      to_gigabytes:     std.assertEqual(units.from.tebibytes(1, common.units.Gigabytes        ), 1099.511627776),
      to_terabytes:     std.assertEqual(units.from.tebibytes(1, common.units.Terabytes        ), 1.099511627776),
      to_petabytes:     std.assertEqual(units.from.tebibytes(1, common.units.Petabytes        ), 0.001099511627776),
    },
    pebibytes: {
      to_bytes:         std.assertEqual(units.from.pebibytes(1, common.units.Bytes            ), 1125899906842624),
      to_kibibytes:     std.assertEqual(units.from.pebibytes(1, common.units.Kibibytes        ), 1099511627776),
      to_mebibytes:     std.assertEqual(units.from.pebibytes(1, common.units.Mebibytes        ), 1073741824),
      to_gigibytes:     std.assertEqual(units.from.pebibytes(1, common.units.Gibibytes        ), 1048576),
      to_tebibytes:     std.assertEqual(units.from.pebibytes(1, common.units.Tebibytes        ), 1024),
      to_pebibytes:     std.assertEqual(units.from.pebibytes(1, common.units.Pebibytes        ), 1),
      to_bytesdec:      std.assertEqual(units.from.pebibytes(1, common.units.BytesDec         ), 1125899906842624),
      to_kilobytes:     std.assertEqual(units.from.pebibytes(1, common.units.Kilobytes        ), 1125899906842.624),
      to_megabytes:     std.assertEqual(units.from.pebibytes(1, common.units.Megabytes        ), 1125899906.842624),
      to_gigabytes:     std.assertEqual(units.from.pebibytes(1, common.units.Gigabytes        ), 1125899.906842624),
      to_terabytes:     std.assertEqual(units.from.pebibytes(1, common.units.Terabytes        ), 1125.899906842624),
      to_petabytes:     std.assertEqual(units.from.pebibytes(1, common.units.Petabytes        ), 1.125899906842624),
    },

    kilobytes: {
      to_bytes:         std.assertEqual(units.from.kilobytes(1, common.units.Bytes            ), 1000),
      to_kibibytes:     std.assertEqual(units.from.kilobytes(1, common.units.Kibibytes        ), 0.9765625),
      to_mebibytes:     std.assertEqual(units.from.kilobytes(1, common.units.Mebibytes        ), 0.00095367431640625),
      to_gigibytes:     std.assertEqual(units.from.kilobytes(1, common.units.Gibibytes        ), 0.000000931322574615478515625),
      to_tebibytes:     std.assertEqual(units.from.kilobytes(1, common.units.Tebibytes        ), 0.0000000009094947017729282379150390625),
      to_pebibytes:     std.assertEqual(units.from.kilobytes(1, common.units.Pebibytes        ), 0.0000000000008881784197001252323389053344),
      to_bytesdec:      std.assertEqual(units.from.kilobytes(1, common.units.BytesDec         ), 1000),
      to_kilobytes:     std.assertEqual(units.from.kilobytes(1, common.units.Kilobytes        ), 1),
      to_megabytes:     std.assertEqual(units.from.kilobytes(1, common.units.Megabytes        ), 0.001),
      to_gigabytes:     std.assertEqual(units.from.kilobytes(1, common.units.Gigabytes        ), 0.000001),
      to_terabytes:     std.assertEqual(units.from.kilobytes(1, common.units.Terabytes        ), 0.000000001),
      to_petabytes:     std.assertEqual(units.from.kilobytes(1, common.units.Petabytes        ), 0.000000000001),
    },
    megabytes: {
      to_bytes:         std.assertEqual(units.from.megabytes(1, common.units.Bytes            ), 1000000),
      to_kibibytes:     std.assertEqual(units.from.megabytes(1, common.units.Kibibytes        ), 976.5625),
      to_mebibytes:     std.assertEqual(units.from.megabytes(1, common.units.Mebibytes        ), 0.95367431640625),
      to_gigibytes:     std.assertEqual(units.from.megabytes(1, common.units.Gibibytes        ), 0.000931322574615478515625),
      to_tebibytes:     std.assertEqual(units.from.megabytes(1, common.units.Tebibytes        ), 0.0000009094947017729282379150390625),
      to_pebibytes:     std.assertEqual(units.from.megabytes(1, common.units.Pebibytes        ), 0.0000000008881784197001252323389053344726),
      to_bytesdec:      std.assertEqual(units.from.megabytes(1, common.units.BytesDec         ), 1000000),
      to_kilobytes:     std.assertEqual(units.from.megabytes(1, common.units.Kilobytes        ), 1000),
      to_megabytes:     std.assertEqual(units.from.megabytes(1, common.units.Megabytes        ), 1),
      to_gigabytes:     std.assertEqual(units.from.megabytes(1, common.units.Gigabytes        ), 0.001),
      to_terabytes:     std.assertEqual(units.from.megabytes(1, common.units.Terabytes        ), 0.000001),
      to_petabytes:     std.assertEqual(units.from.megabytes(1, common.units.Petabytes        ), 0.000000001),
    },
    gigabytes: {
      to_bytes:         std.assertEqual(units.from.gigabytes(1, common.units.Bytes            ), 1000000000),
      to_kibibytes:     std.assertEqual(units.from.gigabytes(1, common.units.Kibibytes        ), 976562.5),
      to_mebibytes:     std.assertEqual(units.from.gigabytes(1, common.units.Mebibytes        ), 953.67431640625),
      to_gigibytes:     std.assertEqual(units.from.gigabytes(1, common.units.Gibibytes        ), 0.931322574615478515625),
      to_tebibytes:     std.assertEqual(units.from.gigabytes(1, common.units.Tebibytes        ), 0.0009094947017729282379150390625),
      to_pebibytes:     std.assertEqual(units.from.gigabytes(1, common.units.Pebibytes        ), 0.0000008881784197001252323389053344726562),
      to_bytesdec:      std.assertEqual(units.from.gigabytes(1, common.units.BytesDec         ), 1000000000),
      to_kilobytes:     std.assertEqual(units.from.gigabytes(1, common.units.Kilobytes        ), 1000000),
      to_megabytes:     std.assertEqual(units.from.gigabytes(1, common.units.Megabytes        ), 1000),
      to_gigabytes:     std.assertEqual(units.from.gigabytes(1, common.units.Gigabytes        ), 1),
      to_terabytes:     std.assertEqual(units.from.gigabytes(1, common.units.Terabytes        ), 0.001),
      to_petabytes:     std.assertEqual(units.from.gigabytes(1, common.units.Petabytes        ), 0.000001),
    },
    terabytes: {
      to_bytes:         std.assertEqual(units.from.terabytes(1, common.units.Bytes            ), 1000000000000),
      to_kibibytes:     std.assertEqual(units.from.terabytes(1, common.units.Kibibytes        ), 976562500),
      to_mebibytes:     std.assertEqual(units.from.terabytes(1, common.units.Mebibytes        ), 953674.31640625),
      to_gigibytes:     std.assertEqual(units.from.terabytes(1, common.units.Gibibytes        ), 931.322574615478515625),
      to_tebibytes:     std.assertEqual(units.from.terabytes(1, common.units.Tebibytes        ), 0.9094947017729282379150390625),
      to_pebibytes:     std.assertEqual(units.from.terabytes(1, common.units.Pebibytes        ), 0.00088817841970012523233890533447265625),
      to_bytesdec:      std.assertEqual(units.from.terabytes(1, common.units.BytesDec         ), 1000000000000),
      to_kilobytes:     std.assertEqual(units.from.terabytes(1, common.units.Kilobytes        ), 1000000000),
      to_megabytes:     std.assertEqual(units.from.terabytes(1, common.units.Megabytes        ), 1000000),
      to_gigabytes:     std.assertEqual(units.from.terabytes(1, common.units.Gigabytes        ), 1000),
      to_terabytes:     std.assertEqual(units.from.terabytes(1, common.units.Terabytes        ), 1),
      to_petabytes:     std.assertEqual(units.from.terabytes(1, common.units.Petabytes        ), 0.001),
    },
    petabytes: {
      to_bytes:         std.assertEqual(units.from.petabytes(1, common.units.Bytes            ), 1000000000000000),
      to_kibibytes:     std.assertEqual(units.from.petabytes(1, common.units.Kibibytes        ), 976562500000),
      to_mebibytes:     std.assertEqual(units.from.petabytes(1, common.units.Mebibytes        ), 953674316.40625),
      to_gigibytes:     std.assertEqual(units.from.petabytes(1, common.units.Gibibytes        ), 931322.574615478515625),
      to_tebibytes:     std.assertEqual(units.from.petabytes(1, common.units.Tebibytes        ), 909.4947017729282379150390625),
      to_pebibytes:     std.assertEqual(units.from.petabytes(1, common.units.Pebibytes        ), 0.88817841970012523233890533447265625),
      to_bytesdec:      std.assertEqual(units.from.petabytes(1, common.units.BytesDec         ), 1000000000000000),
      to_kilobytes:     std.assertEqual(units.from.petabytes(1, common.units.Kilobytes        ), 1000000000000),
      to_megabytes:     std.assertEqual(units.from.petabytes(1, common.units.Megabytes        ), 1000000000),
      to_gigabytes:     std.assertEqual(units.from.petabytes(1, common.units.Gigabytes        ), 1000000),
      to_terabytes:     std.assertEqual(units.from.petabytes(1, common.units.Terabytes        ), 1000),
      to_petabytes:     std.assertEqual(units.from.petabytes(1, common.units.Petabytes        ), 1),
    },
  },

  bin: {
    KiB: std.assertEqual(units.KiB, 1024),
    MiB: std.assertEqual(units.MiB, 1048576),
    GiB: std.assertEqual(units.GiB, 1073741824),
    TiB: std.assertEqual(units.TiB, 1099511627776),
    PiB: std.assertEqual(units.PiB, 1125899906842624),
    EiB: std.assertEqual(units.EiB, 1152921504606846976),
    ZiB: std.assertEqual(units.ZiB, 1180591620717411303424),
    YiB: std.assertEqual(units.YiB, 1208925819614629174706176),
  },
  dec: {
    KB: std.assertEqual(units.KB, 1000),
    MB: std.assertEqual(units.MB, 1000000),
    GB: std.assertEqual(units.GB, 1000000000),
    TB: std.assertEqual(units.TB, 1000000000000),
    PB: std.assertEqual(units.PB, 1000000000000000),
    EB: std.assertEqual(units.EB, 1000000000000000000),
    ZB: std.assertEqual(units.ZB, 1000000000000000000000),
    YB: std.assertEqual(units.YB, 1000000000000000000000000),
    RB: std.assertEqual(units.RB, 1000000000000000000000000000),
    QB: std.assertEqual(units.QB, 1000000000000000000000000000000),
  },
}
